import React, { useState, useEffect } from 'react';
import { fetchProducts, createRatePlan } from './api';
import { showSuccessAlert, showErrorAlert } from '../../../utils/sweetAlert';
import './CreatePricePlan.css';

interface Product {
  productId: string;
  productName: string;
  productType: string;
  description: string;
  category: string;
  status: string;
  version: string;
  visibility: boolean;
}

export interface RatePlanData {
  ratePlanId?: string;  // Make optional since it's generated by API
  ratePlanName: string;
  productName: string;
  description: string;
  ratePlanType: string;
  billingFrequency: string;
}

interface PlanDetailsProps {
  onPricingModelSelect: (model: string) => void;
  onNext: (data: RatePlanData) => void;
}

const PlanDetails: React.FC<PlanDetailsProps> = ({ onPricingModelSelect, onNext }) => {
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedProduct, setSelectedProduct] = useState('');
  const [ratePlanName, setRatePlanName] = useState('');
  const [description, setDescription] = useState('');
  const [ratePlanType, setRatePlanType] = useState('');
  const [billingFrequency, setBillingFrequency] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    fetchProducts().then(setProducts).catch(() => setError('Failed to fetch products'));
  }, []);

  const handleNextClick = () => {
    if (!selectedProduct || !ratePlanName || !description || !billingFrequency || !ratePlanType) {
      setError('Please fill in all required fields');
      return;
    }

    const selectedProductObj = products.find(p => p.productName === selectedProduct);
    if (!selectedProductObj) {
      setError('Invalid product selected');
      return;
    }

    const formData: RatePlanData = {
      ratePlanName,
      productName: selectedProductObj.productName,
      description,
      ratePlanType,
      billingFrequency: billingFrequency.toUpperCase(),
    };

    // Save to backend
    const payload = { ...formData, ratePlanId: '' } as const;
    console.log('Payload to backend:', payload);
    createRatePlan(payload as any)
      .then((saved) => {
        showSuccessAlert('Success', 'Plan details saved successfully.');
        onNext(saved);
      })
      .catch(() => {
        showErrorAlert('Error', 'Failed to save plan details.');
      });
  };

  return (
    <div className="price-plan-details-section">
      <div className="price-plan-form">
        <div className="price-plan-form-groups">
          <label>Rate Plan Name</label>
          <input
            type="text"
            value={ratePlanName}
            onChange={(e) => setRatePlanName(e.target.value)}
            placeholder="Google Maps API"
          />
        </div>

        <div className="price-plan-form-groups">
          <label>Select Product</label>
          <select
            value={selectedProduct}
            onChange={(e) => setSelectedProduct(e.target.value)}
          >
            <option value="">--Select--</option>
            {products.map((product) => (
              <option key={product.productId} value={product.productName}>
                {product.productName}
              </option>
            ))}
          </select>
        </div>

        <div className="price-plan-form-groups">
          <label>Description</label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Enter description here"
          />
        </div>

        <div className="price-plan-form-groups">
          <label>Rate Plan Type</label>
          <select
            value={ratePlanType}
            onChange={(e) => {
              setRatePlanType(e.target.value);
              onPricingModelSelect(e.target.value);
            }}
          >
            <option value="">--Select--</option>
            <option value="FLATFEE">Flat Fee</option>
            <option value="TIERED">Tiered Pricing</option>
            <option value="VOLUME_BASED">Volume Pricing</option>
            <option value="STAIRSTEP">Stair Step Pricing</option>
            <option value="USAGE_BASED">Usage Based</option>
          </select>
        </div>

        <div className="price-plan-form-groups">
          <label>Billing Frequency</label>
          <select
            value={billingFrequency}
            onChange={(e) => setBillingFrequency(e.target.value)}
          >
            <option value="">--Select--</option>
            <option value="MONTHLY">Monthly</option>
            <option value="YEARLY">Yearly</option>
            <option value="DAILY">Daily</option>
            <option value="HOURLY">Hourly</option>
            <option value="WEEKLY">Weekly</option>
          </select>
        </div>

        {error && <p style={{ color: 'red' }}>{error}</p>}

        <button className="button-primary" onClick={handleNextClick}>
          Save & Next
        </button>
      </div>
    </div>
  );
};

export default PlanDetails;
