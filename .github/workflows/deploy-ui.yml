name: Deploy UI to EC2

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout code
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js (22.12.0 for Wasp)
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'
          check-latest: true

      - name: ⚙️ Setup Wasp CLI
        run: |
          curl -sSL https://get.wasp-lang.dev/installer.sh | bash
          echo "$HOME/.wasp/bin" >> "$GITHUB_PATH"
          export PATH="$HOME/.wasp/bin:$PATH"

      - name: 🧪 Verify versions
        run: |
          node -v
          npm -v
          wasp version || true

      - name: 📦 Install root deps and Rollup native binary
        run: |
          rm -rf node_modules package-lock.json
          npm ci || npm install
          npm install --save-optional @rollup/rollup-linux-x64-gnu

      - name: 🛠 Run wasp build from app folder
        run: |
          cd app
          wasp build

      - name: 🎨 Install frontend deps and build UI
        run: |
          cd app/.wasp/build/web-app
          rm -rf node_modules package-lock.json
          npm ci || npm install
          npm install --save-optional @rollup/rollup-linux-x64-gnu
          sed -i 's|../../../index.html|index.html|' vite.config.ts || true
          npm run build
          echo "Build output files:"
          ls -la build/
          find build/ -name "index.html" -type f -ls

      # 🔑 Prepare SSH key
      - name: 🔑 Prepare SSH key
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          set -e
          echo "$EC2_SSH_KEY" > key.pem
          chmod 600 key.pem

      # 🧹 Ensure remote target exists and is writable by ubuntu
      - name: 🧹 Prepare remote target dir (fix perms)
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          set -e
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@$EC2_HOST 'bash -s' <<'REMOTE'
          set -e
          # Create or fix ownership so ubuntu can write
          sudo mkdir -p /home/ubuntu/frontend-temp
          sudo chown -R ubuntu:ubuntu /home/ubuntu/frontend-temp
          # Clean contents to avoid stale files
          rm -rf /home/ubuntu/frontend-temp/*
          # Double-check we can write here
          touch /home/ubuntu/frontend-temp/.write_test && rm /home/ubuntu/frontend-temp/.write_test
          REMOTE

      # 📦➡️🐧 Copy build via tar over SSH (no SFTP/scp quirks)
      - name: 📤 Transfer build (tar over SSH)
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          set -e
          # Stream a tarball to the remote and extract into frontend-temp
          tar -C app/.wasp/build/web-app/build -czf - . \
            | ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@$EC2_HOST \
              'tar -C /home/ubuntu/frontend-temp -xzf -'

      # 🚀 Deploy to Nginx
      - name: 🚀 Deploy UI to Nginx (NO-CACHE)
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          set -e
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@$EC2_HOST 'bash -s' << "REMOTE"
          set -e
          echo "✅ Cleaning up old files in /var/www/html"
          sudo rm -rf /var/www/html/*
          sudo mkdir -p /var/www/html

          echo "📦 Copying new build files to /var/www/html"
          sudo cp -r /home/ubuntu/frontend-temp/. /var/www/html/

          echo "🔐 Setting ownership and permissions"
          sudo chown -R www-data:www-data /var/www/html
          sudo find /var/www/html -type d -exec chmod 755 {} \;
          sudo find /var/www/html -type f -exec chmod 644 {} \;

          echo "📝 Writing NO-CACHE Nginx server block"
          sudo bash -c 'cat >/etc/nginx/sites-available/default' << "NGINXCONF"
          server {
            listen 80;
            server_name _;

            root /var/www/html;
            index index.html;

            # ZERO-CACHE for everything (HTML + assets)
            location / {
              try_files $uri $uri/ /index.html;
              add_header Cache-Control "no-store" always;
              expires off;
              etag off;
            }
          }
          NGINXCONF

          echo "🧪 Testing Nginx config & reloading"
          sudo nginx -t
          sudo systemctl reload nginx

          echo "📋 Final file list in /var/www/html"
          ls -la /var/www/html

          echo "🎉 UI Deployment complete (NO-CACHE enabled)!"
          REMOTE
